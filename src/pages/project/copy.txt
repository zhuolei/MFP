 {/* 控制visible true or false让modal显示 */}
 <Modal
                title={done ? null : `${current ? 'Add a' : 'Edit'} Project`}
                className="standardListForm"
                width={640}
                bodyStyle={done ? { padding: '72px 0' } : { padding: '28px 0 0' }}
                destroyOnClose
                visible={visible}
                {...modalFooter}
                >
                {getModalContent()}
            </Modal>

        const modalFooter = done
            ? { footer: null, onCancel: this.handleDone }
            : { okText: '保存', onOk: this.handleSubmit, onCancel: this.handleCancel };

const getModalContent = () => {
        if (done) {
            return (
            <Result
                type="success"
                title="操作成功"
                description="一系列的信息描述，很短同样也可以带标点。"
                actions={
                <Button type="primary" onClick={this.handleDone}>
                    知道了
                </Button>
                }
                className="formResult"
            />
            );
        }
        
        return (
            <Form onSubmit={this.handleSubmit}>
            <FormItem label="Project Name" {...this.formLayout}>
                {getFieldDecorator('title', {
                rules: [{ required: true, message: 'please input project name' }],
                initialValue: current.title,
                })(<Input placeholder="请输入" />)}
            </FormItem>
            <FormItem label="开始时间" {...this.formLayout}>
                {getFieldDecorator('createdAt', {
                rules: [{ required: true, message: '请选择开始时间' }],
                initialValue: current.createdAt ? moment(current.createdAt) : null,
                })(
                <DatePicker
                    showTime
                    placeholder="请选择"
                    format="YYYY-MM-DD HH:mm:ss"
                    style={{ width: '100%' }}
                />
                )}
            </FormItem>
            <FormItem label="任务负责人" {...this.formLayout}>
                {getFieldDecorator('owner', {
                rules: [{ required: true, message: '请选择任务负责人' }],
                initialValue: current.owner,
                })(
                <Select placeholder="请选择">
                    <SelectOption value="付晓晓">付晓晓</SelectOption>
                    <SelectOption value="周毛毛">周毛毛</SelectOption>
                </Select>
                )}
            </FormItem>
            <FormItem {...this.formLayout} label="产品描述">
                {getFieldDecorator('subDescription', {
                rules: [{ message: '请输入至少五个字符的产品描述！', min: 5 }],
                initialValue: current.subDescription,
                })(<TextArea rows={4} placeholder="请输入至少五个字符" />)}
            </FormItem>
            </Form>
        );
        };
        
        <Form.Item
          {...formItemLayout}
          label="Checkbox.Group"
        >
          {getFieldDecorator("checkbox-group", {
            initialValue: ["A", "B"],
          })(
            <Checkbox.Group style={{ width: "100%" }}>
              <Row>
                <Col span={8}><Checkbox value="A">A</Checkbox></Col>
                <Col span={8}><Checkbox disabled value="B">B</Checkbox></Col>
                <Col span={8}><Checkbox value="C">C</Checkbox></Col>
                <Col span={8}><Checkbox value="D">D</Checkbox></Col>
                <Col span={8}><Checkbox value="E">E</Checkbox></Col>
              </Row>
            </Checkbox.Group>
          )}
        </Form.Item>




        {	
	"teamId" : 38,
	"userProjectCreation": [
		{"userId":"14","commentrole":1,"composerole1":"Composer","composerole2": null,"composerole3":null,"mediarole":1,"notificationrole":1},
		{"userId":"18","commentrole":2,"composerole1": null,"composerole2": "Orchestrator","composerole3":null,"mediarole":2,"notificationrole":2}
	],
	"filmtitle": "film2",
	"season": "season2",
	"episodetitle": "episode",
	"episodenumber": "episode1",
	"codename": "code",
	"projecttype": "radio",
	"timecoderate": "24",
	"lanesintimeline": "1",
	"scoringstartdate": "2018-12-31 01:30:30",
	"scoringdeadline": "2019-1-1 01:30:30",
	"orchestrationdeadline": "2019-1-2 01:30:30",
	"deliverydeadline": "2019-1-2 01:30:30"
}

teamUsers.filter( tu => {
    tu.username === this.props.loggedIn.username
})